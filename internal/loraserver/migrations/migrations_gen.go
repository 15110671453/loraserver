// Code generated by go-bindata.
// sources:
// ../../migrations/0001_initial.sql
// ../../migrations/0002_join_accept_params.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\xc1\x4e\xc3\x30\x10\x44\xcf\xdd\xaf\xd8\x63\x2b\xa8\x54\xce\xbd\xf2\x0b\x9c\xa3\xad\x3d\x14\x0b\x67\x6d\x6d\x9c\x42\xfe\x1e\x27\x04\x88\x25\x2a\xe5\x10\xef\x8c\xdf\xcc\xfa\x78\xe4\x87\x3e\x5c\x4d\x0a\xf8\x25\x93\x33\xcc\x7f\x45\x2e\x11\x2c\x39\xc7\xe0\xa4\x84\xa4\xbc\xa7\x5d\x3d\x76\x18\x03\x5f\xa6\x02\xe1\x6c\xa1\x17\x9b\xf8\x1d\xd3\x23\xed\x54\x7a\xb0\x7b\x13\x13\x57\x60\x7c\xab\x4a\xd0\x2b\xef\x9f\x4e\xa7\x03\x6b\x2a\xac\x63\x8c\x74\x38\x53\x9b\xa0\xc9\x63\x46\x7b\xdc\xee\xa2\xdb\x58\xc3\x2b\x0c\xea\x30\x34\xf5\xea\xe7\x11\x51\xc1\x4e\x06\x27\x1e\xbf\xa1\x2b\xa1\xb2\x56\xc2\x46\x18\x07\xf8\x6e\xce\xd6\xb4\x10\x17\xc3\xb6\x65\x50\x8f\xcf\xa5\x65\xf7\x53\xa3\x26\x7d\xb7\x5e\x07\xb3\x9b\xb6\xaf\xf8\x9c\x3e\x94\xbc\xa5\xfc\xcf\xed\xea\x5d\x94\xbf\xed\xdb\xc9\x66\xa5\x33\x7d\x05\x00\x00\xff\xff\xbe\x13\xa2\xf9\x9b\x01\x00\x00")

func _0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initialSql,
		"0001_initial.sql",
	)
}

func _0001_initialSql() (*asset, error) {
	bytes, err := _0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial.sql", size: 411, mode: os.FileMode(420), modTime: time.Unix(1457868859, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0002_join_accept_paramsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xc1\x6e\xc2\x30\x0c\x86\xcf\xe4\x29\x7c\xa4\x5a\x91\xca\xae\x68\x9c\xf6\x0a\x3b\x57\x26\x71\x4b\x44\xea\x30\x37\xdd\xc6\xdb\x2f\x0d\x2a\x94\xac\xd2\xa6\xdd\x22\xfb\xb7\xff\xcf\xbf\xb2\xd9\xc0\x53\x67\x5b\xc1\x40\xf0\x76\x56\x5a\x68\x7c\x05\x3c\x38\x02\x7d\x44\x66\x72\xb5\xb3\x7d\x80\xb5\x5a\x59\x03\x07\xdb\xf6\x24\x16\x1d\x9c\xc5\x76\x28\x17\x38\xd1\xa5\x54\x2b\xc6\x2e\xe9\x05\x75\x20\x81\x8f\xd8\xb1\xdc\xc2\x7a\x5b\x55\x05\xb0\x0f\xc0\x83\x73\xaa\xd8\xa9\x45\x87\x5f\x96\xcf\x39\xea\xab\xce\x72\x00\xa1\x86\x84\x58\x53\xff\x48\xea\x19\x0c\x39\x8a\x26\x1a\x7b\x8d\x86\x6e\x00\xf7\x5d\x10\x17\x50\x1b\x49\x67\xad\x46\xe8\x7d\x88\xfb\x2e\x4b\x4d\x7d\x24\x7d\x82\xf5\x34\xbe\x7f\x81\x0a\x90\x0d\xdc\x87\xf6\x50\x15\x51\x38\xb0\x8d\x85\x9b\x72\x82\x2e\x27\xc6\x22\xa5\x80\x6e\x8c\xe9\x1a\x02\x7b\x43\x6a\x85\xc6\x80\xf6\x6e\xe8\x18\xe4\xab\x8e\x07\x60\xe2\x78\xbe\x41\xc4\xa3\x1a\x1c\x5c\x80\xaa\xcc\xd4\xdb\xda\x48\xed\x9b\xa6\xa7\xf0\xb7\x91\x7f\x07\x3a\x3a\x8c\x8b\x97\x2f\x48\x95\xfc\x06\x23\xfe\x3c\x71\x94\x3f\x44\x73\xf4\xb9\x32\x1a\xcc\x7f\xe6\xab\xff\xe4\x05\xc7\x34\x91\x19\x96\x79\x79\x66\x91\xf5\xb2\x18\xa2\x67\xea\x3e\x7c\xcd\xc5\x62\x9a\xd8\xa9\xef\x00\x00\x00\xff\xff\x41\xc7\xa6\x4a\x3c\x03\x00\x00")

func _0002_join_accept_paramsSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_join_accept_paramsSql,
		"0002_join_accept_params.sql",
	)
}

func _0002_join_accept_paramsSql() (*asset, error) {
	bytes, err := _0002_join_accept_paramsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_join_accept_params.sql", size: 828, mode: os.FileMode(420), modTime: time.Unix(1462991766, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_initial.sql": _0001_initialSql,
	"0002_join_accept_params.sql": _0002_join_accept_paramsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_initial.sql": &bintree{_0001_initialSql, map[string]*bintree{}},
	"0002_join_accept_params.sql": &bintree{_0002_join_accept_paramsSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

