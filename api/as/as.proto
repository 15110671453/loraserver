syntax = "proto3";

package as;

// ApplicationServer is the server to be implemented by the application server.
service ApplicationServer {
	// JoinRequest requests the application server to validate the join-request and return an encrypted join-accept.
	rpc JoinRequest(JoinRequestRequest) returns (JoinRequestResponse) {}

    // PublishDataUp publishes data received from an end-device.
    rpc PublishDataUp(PublishDataUpRequest) returns (PublishDataUpResponse) {}

    // PublishDataDownACK publishes a data-down ack response.
    rpc PublishDataDownACK(PublishDataDownACKRequest) returns (PublishDataDownACKResponse) {}

    // PublishError publishes an error message.
    rpc PublishError(PublishErrorRequest) returns (PublishErrorResponse) {}
}

enum RXWindow {
    RX1 = 0;
    RX2 = 1;
}

message DataRate {
    string modulation = 1;
    uint32 bandWidth = 2;
    uint32 spreadFactor = 3;
    uint32 bitrate = 4;
}

message RXInfo {
    bytes mac = 1;
    string time = 2;
    int32 rssi = 3;
    double loRaSNR = 4;
}

message TXInfo {
    int64 frequency = 1;
    DataRate dataRate = 2;
    bool adr = 3;
    string codeRate = 4;
}

message JoinRequestRequest {
	bytes phyPayload = 1;
	bytes devAddr = 2;
}

message JoinRequestResponse {
	bytes phyPayload = 1;
	bytes nwkSKey = 2;
	bytes appEUI = 3;
	bytes devEUI = 4;
	uint32 rxDelay = 5;
	uint32 rx1DROffset = 6;
	repeated uint32 cFList = 7;
    RXWindow rxWindow = 8;
    uint32 rx2DR = 9;
}

message PublishDataUpRequest {
    bytes devEUI = 1;
    uint32 fCnt = 2;
    bytes data = 3;
    TXInfo txInfo = 4;
    repeated RXInfo rxInfo = 5;
}

message PublishDataUpResponse {}

message PublishDataDownACKRequest {
    int64 reference = 1;
    bytes devEUI = 2;
}

message PublishDataDownACKResponse {}

message PublishErrorRequest {
    int64 reference = 1;
    bytes devEUI = 2;
    string message = 3;
}

message PublishErrorResponse {}