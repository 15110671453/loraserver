// Code generated by protoc-gen-go.
// source: nc.proto
// DO NOT EDIT!

/*
Package nc is a generated protocol buffer package.

It is generated from these files:
	nc.proto

It has these top-level messages:
	DataRate
	RXInfo
	TXInfo
	PublishRXInfoRequest
	PublishRXInfoResponse
	PublishDataUpMACCommandRequest
	PublishDataUpMACCommandResponse
*/
package nc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataRate struct {
	Modulation   string `protobuf:"bytes,1,opt,name=modulation" json:"modulation,omitempty"`
	BandWidth    uint32 `protobuf:"varint,2,opt,name=bandWidth" json:"bandWidth,omitempty"`
	SpreadFactor uint32 `protobuf:"varint,3,opt,name=spreadFactor" json:"spreadFactor,omitempty"`
	Bitrate      uint32 `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
}

func (m *DataRate) Reset()                    { *m = DataRate{} }
func (m *DataRate) String() string            { return proto.CompactTextString(m) }
func (*DataRate) ProtoMessage()               {}
func (*DataRate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RXInfo struct {
	Mac     []byte  `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Time    string  `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	Rssi    int32   `protobuf:"varint,3,opt,name=rssi" json:"rssi,omitempty"`
	LoRaSNR float64 `protobuf:"fixed64,4,opt,name=loRaSNR" json:"loRaSNR,omitempty"`
}

func (m *RXInfo) Reset()                    { *m = RXInfo{} }
func (m *RXInfo) String() string            { return proto.CompactTextString(m) }
func (*RXInfo) ProtoMessage()               {}
func (*RXInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TXInfo struct {
	Frequency int64     `protobuf:"varint,1,opt,name=frequency" json:"frequency,omitempty"`
	DataRate  *DataRate `protobuf:"bytes,2,opt,name=dataRate" json:"dataRate,omitempty"`
	Adr       bool      `protobuf:"varint,3,opt,name=adr" json:"adr,omitempty"`
	CodeRate  string    `protobuf:"bytes,4,opt,name=codeRate" json:"codeRate,omitempty"`
}

func (m *TXInfo) Reset()                    { *m = TXInfo{} }
func (m *TXInfo) String() string            { return proto.CompactTextString(m) }
func (*TXInfo) ProtoMessage()               {}
func (*TXInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

type PublishRXInfoRequest struct {
	DevEUI []byte  `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	TxInfo *TXInfo `protobuf:"bytes,2,opt,name=txInfo" json:"txInfo,omitempty"`
	RxInfo *RXInfo `protobuf:"bytes,3,opt,name=rxInfo" json:"rxInfo,omitempty"`
}

func (m *PublishRXInfoRequest) Reset()                    { *m = PublishRXInfoRequest{} }
func (m *PublishRXInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRXInfoRequest) ProtoMessage()               {}
func (*PublishRXInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PublishRXInfoRequest) GetTxInfo() *TXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *PublishRXInfoRequest) GetRxInfo() *RXInfo {
	if m != nil {
		return m.RxInfo
	}
	return nil
}

type PublishRXInfoResponse struct {
}

func (m *PublishRXInfoResponse) Reset()                    { *m = PublishRXInfoResponse{} }
func (m *PublishRXInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishRXInfoResponse) ProtoMessage()               {}
func (*PublishRXInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PublishDataUpMACCommandRequest struct {
	DevEUI     []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	FrmPayload bool   `protobuf:"varint,2,opt,name=frmPayload" json:"frmPayload,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PublishDataUpMACCommandRequest) Reset()                    { *m = PublishDataUpMACCommandRequest{} }
func (m *PublishDataUpMACCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishDataUpMACCommandRequest) ProtoMessage()               {}
func (*PublishDataUpMACCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PublishDataUpMACCommandResponse struct {
}

func (m *PublishDataUpMACCommandResponse) Reset()                    { *m = PublishDataUpMACCommandResponse{} }
func (m *PublishDataUpMACCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishDataUpMACCommandResponse) ProtoMessage()               {}
func (*PublishDataUpMACCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*DataRate)(nil), "nc.DataRate")
	proto.RegisterType((*RXInfo)(nil), "nc.RXInfo")
	proto.RegisterType((*TXInfo)(nil), "nc.TXInfo")
	proto.RegisterType((*PublishRXInfoRequest)(nil), "nc.PublishRXInfoRequest")
	proto.RegisterType((*PublishRXInfoResponse)(nil), "nc.PublishRXInfoResponse")
	proto.RegisterType((*PublishDataUpMACCommandRequest)(nil), "nc.PublishDataUpMACCommandRequest")
	proto.RegisterType((*PublishDataUpMACCommandResponse)(nil), "nc.PublishDataUpMACCommandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for NetworkController service

type NetworkControllerClient interface {
	// PublishRXInfo publishes rx related meta-data.
	PublishRXInfo(ctx context.Context, in *PublishRXInfoRequest, opts ...grpc.CallOption) (*PublishRXInfoResponse, error)
	// PublishDataUpMACCommand publishes a mac-command received by an end-device.
	PublishDataUpMACCommand(ctx context.Context, in *PublishDataUpMACCommandRequest, opts ...grpc.CallOption) (*PublishDataUpMACCommandResponse, error)
}

type networkControllerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkControllerClient(cc *grpc.ClientConn) NetworkControllerClient {
	return &networkControllerClient{cc}
}

func (c *networkControllerClient) PublishRXInfo(ctx context.Context, in *PublishRXInfoRequest, opts ...grpc.CallOption) (*PublishRXInfoResponse, error) {
	out := new(PublishRXInfoResponse)
	err := grpc.Invoke(ctx, "/nc.NetworkController/PublishRXInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkControllerClient) PublishDataUpMACCommand(ctx context.Context, in *PublishDataUpMACCommandRequest, opts ...grpc.CallOption) (*PublishDataUpMACCommandResponse, error) {
	out := new(PublishDataUpMACCommandResponse)
	err := grpc.Invoke(ctx, "/nc.NetworkController/PublishDataUpMACCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkController service

type NetworkControllerServer interface {
	// PublishRXInfo publishes rx related meta-data.
	PublishRXInfo(context.Context, *PublishRXInfoRequest) (*PublishRXInfoResponse, error)
	// PublishDataUpMACCommand publishes a mac-command received by an end-device.
	PublishDataUpMACCommand(context.Context, *PublishDataUpMACCommandRequest) (*PublishDataUpMACCommandResponse, error)
}

func RegisterNetworkControllerServer(s *grpc.Server, srv NetworkControllerServer) {
	s.RegisterService(&_NetworkController_serviceDesc, srv)
}

func _NetworkController_PublishRXInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRXInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControllerServer).PublishRXInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nc.NetworkController/PublishRXInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControllerServer).PublishRXInfo(ctx, req.(*PublishRXInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkController_PublishDataUpMACCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDataUpMACCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkControllerServer).PublishDataUpMACCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nc.NetworkController/PublishDataUpMACCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkControllerServer).PublishDataUpMACCommand(ctx, req.(*PublishDataUpMACCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nc.NetworkController",
	HandlerType: (*NetworkControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishRXInfo",
			Handler:    _NetworkController_PublishRXInfo_Handler,
		},
		{
			MethodName: "PublishDataUpMACCommand",
			Handler:    _NetworkController_PublishDataUpMACCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("nc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x25, 0x4d, 0x09, 0xc9, 0x90, 0x4a, 0x30, 0x02, 0x1a, 0x56, 0xd5, 0x52, 0xcc, 0x65, 0x4f,
	0x7b, 0x28, 0x5f, 0x80, 0x16, 0x2a, 0xf5, 0x40, 0x55, 0x0d, 0x54, 0x70, 0xe0, 0xe2, 0xc4, 0x5e,
	0x35, 0x22, 0xb1, 0x83, 0xe3, 0x2d, 0xf4, 0xc2, 0x91, 0xff, 0xe2, 0xcf, 0x90, 0x1d, 0xa7, 0xbb,
	0x45, 0xbb, 0x70, 0x9b, 0x99, 0xf7, 0x32, 0xef, 0xbd, 0x89, 0x0c, 0xa9, 0xaa, 0xe6, 0x9d, 0xd1,
	0x56, 0xe3, 0x9e, 0xaa, 0xd8, 0xaf, 0x08, 0xd2, 0xb7, 0xdc, 0x72, 0xe2, 0x56, 0xe2, 0x14, 0xa0,
	0xd5, 0x62, 0xd5, 0x70, 0x5b, 0x6b, 0x55, 0x44, 0xc7, 0xd1, 0x2c, 0xa3, 0x8d, 0x09, 0x1e, 0x41,
	0x56, 0x72, 0x25, 0x3e, 0xd5, 0xc2, 0x5e, 0x15, 0x7b, 0xc7, 0xd1, 0xec, 0x80, 0xd6, 0x03, 0x64,
	0x90, 0xf7, 0x9d, 0x91, 0x5c, 0x9c, 0xf2, 0xca, 0x6a, 0x53, 0xc4, 0x9e, 0x70, 0x67, 0x86, 0x05,
	0x3c, 0x28, 0x6b, 0x6b, 0xb8, 0x95, 0xc5, 0xbe, 0x87, 0xc7, 0x96, 0x7d, 0x81, 0x84, 0x3e, 0x9f,
	0xa9, 0xa5, 0xc6, 0x47, 0x10, 0xb7, 0xbc, 0xf2, 0xf2, 0x39, 0xb9, 0x12, 0x11, 0xf6, 0x6d, 0xdd,
	0x4a, 0x2f, 0x99, 0x91, 0xaf, 0xdd, 0xcc, 0xf4, 0x7d, 0xed, 0x55, 0xee, 0x93, 0xaf, 0xdd, 0xf6,
	0x46, 0x13, 0xff, 0x70, 0x4e, 0x7e, 0x7b, 0x44, 0x63, 0xcb, 0x7e, 0x42, 0xf2, 0x71, 0xd8, 0x7e,
	0x04, 0xd9, 0xd2, 0xc8, 0x6f, 0x2b, 0xa9, 0xaa, 0x1b, 0xaf, 0x11, 0xd3, 0x7a, 0x80, 0x33, 0x48,
	0x45, 0xb8, 0x86, 0x57, 0x7b, 0x78, 0x92, 0xcf, 0x55, 0x35, 0x1f, 0x2f, 0x44, 0xb7, 0xa8, 0x73,
	0xc9, 0xc5, 0x10, 0x32, 0x25, 0x57, 0xe2, 0x04, 0xd2, 0x4a, 0x0b, 0x49, 0x63, 0xb8, 0x8c, 0x6e,
	0x7b, 0x76, 0x0d, 0x4f, 0x2e, 0x56, 0x65, 0x53, 0xf7, 0x57, 0x43, 0x48, 0x72, 0x82, 0xbd, 0xc5,
	0x67, 0x90, 0x08, 0x79, 0xfd, 0xee, 0xf2, 0x2c, 0xc4, 0x0d, 0x1d, 0x32, 0x48, 0xec, 0x0f, 0x47,
	0x0c, 0x2e, 0xc0, 0xb9, 0x18, 0x12, 0x50, 0x40, 0x1c, 0xc7, 0x0c, 0x9c, 0x78, 0xcd, 0x09, 0xeb,
	0x03, 0xc2, 0x0e, 0xe1, 0xe9, 0x5f, 0xba, 0x7d, 0xa7, 0x55, 0x2f, 0x59, 0x03, 0xd3, 0x00, 0xb8,
	0x6c, 0x97, 0xdd, 0xfb, 0x37, 0x8b, 0x85, 0x6e, 0x5b, 0xae, 0xc4, 0xff, 0xac, 0x4d, 0x01, 0x96,
	0xa6, 0xbd, 0xe0, 0x37, 0x8d, 0xe6, 0xc2, 0xdb, 0x4b, 0x69, 0x63, 0xe2, 0x7e, 0x8c, 0x3b, 0x92,
	0x37, 0x95, 0x93, 0xaf, 0xd9, 0x4b, 0x78, 0xb1, 0x53, 0x6d, 0x30, 0x74, 0xf2, 0x3b, 0x82, 0xc7,
	0xe7, 0xd2, 0x7e, 0xd7, 0xe6, 0xeb, 0x42, 0x2b, 0x6b, 0x74, 0xd3, 0x48, 0x83, 0xa7, 0x70, 0x70,
	0xc7, 0x3f, 0x16, 0x2e, 0xe4, 0xb6, 0x53, 0x4e, 0x9e, 0x6f, 0x41, 0x42, 0xd8, 0x7b, 0x28, 0xe0,
	0x70, 0x87, 0x01, 0x64, 0x1b, 0xdf, 0xed, 0xb8, 0xc5, 0xe4, 0xd5, 0x3f, 0x39, 0xa3, 0x4a, 0x99,
	0xf8, 0x77, 0xf5, 0xfa, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x7f, 0x27, 0x69, 0x63, 0x03,
	0x00, 0x00,
}
