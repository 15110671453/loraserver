// Code generated by protoc-gen-go.
// source: channels.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateChannelListRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateChannelListRequest) Reset()                    { *m = CreateChannelListRequest{} }
func (m *CreateChannelListRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelListRequest) ProtoMessage()               {}
func (*CreateChannelListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type CreateChannelListResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateChannelListResponse) Reset()                    { *m = CreateChannelListResponse{} }
func (m *CreateChannelListResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelListResponse) ProtoMessage()               {}
func (*CreateChannelListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type UpdateChannelListRequest struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UpdateChannelListRequest) Reset()                    { *m = UpdateChannelListRequest{} }
func (m *UpdateChannelListRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateChannelListRequest) ProtoMessage()               {}
func (*UpdateChannelListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type UpdateChannelListResponse struct {
}

func (m *UpdateChannelListResponse) Reset()                    { *m = UpdateChannelListResponse{} }
func (m *UpdateChannelListResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateChannelListResponse) ProtoMessage()               {}
func (*UpdateChannelListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type GetChannelListRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetChannelListRequest) Reset()                    { *m = GetChannelListRequest{} }
func (m *GetChannelListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetChannelListRequest) ProtoMessage()               {}
func (*GetChannelListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type GetChannelListResponse struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GetChannelListResponse) Reset()                    { *m = GetChannelListResponse{} }
func (m *GetChannelListResponse) String() string            { return proto.CompactTextString(m) }
func (*GetChannelListResponse) ProtoMessage()               {}
func (*GetChannelListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

type ListChannelListRequest struct {
	Limit  int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListChannelListRequest) Reset()                    { *m = ListChannelListRequest{} }
func (m *ListChannelListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChannelListRequest) ProtoMessage()               {}
func (*ListChannelListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

type ListChannelListResponse struct {
	TotalCount int64                     `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	Result     []*GetChannelListResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListChannelListResponse) Reset()                    { *m = ListChannelListResponse{} }
func (m *ListChannelListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListChannelListResponse) ProtoMessage()               {}
func (*ListChannelListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *ListChannelListResponse) GetResult() []*GetChannelListResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteChannelListRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteChannelListRequest) Reset()                    { *m = DeleteChannelListRequest{} }
func (m *DeleteChannelListRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteChannelListRequest) ProtoMessage()               {}
func (*DeleteChannelListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

type DeleteChannelListResponse struct {
}

func (m *DeleteChannelListResponse) Reset()                    { *m = DeleteChannelListResponse{} }
func (m *DeleteChannelListResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteChannelListResponse) ProtoMessage()               {}
func (*DeleteChannelListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

type CreateChannelRequest struct {
	ChannelListID int64 `protobuf:"varint,1,opt,name=channelListID" json:"channelListID,omitempty"`
	Channel       int64 `protobuf:"varint,2,opt,name=channel" json:"channel,omitempty"`
	Frequency     int64 `protobuf:"varint,3,opt,name=frequency" json:"frequency,omitempty"`
}

func (m *CreateChannelRequest) Reset()                    { *m = CreateChannelRequest{} }
func (m *CreateChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelRequest) ProtoMessage()               {}
func (*CreateChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

type CreateChannelResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateChannelResponse) Reset()                    { *m = CreateChannelResponse{} }
func (m *CreateChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelResponse) ProtoMessage()               {}
func (*CreateChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

type GetChannelRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetChannelRequest) Reset()                    { *m = GetChannelRequest{} }
func (m *GetChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*GetChannelRequest) ProtoMessage()               {}
func (*GetChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

type GetChannelResponse struct {
	Id            int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChannelListID int64 `protobuf:"varint,2,opt,name=channelListID" json:"channelListID,omitempty"`
	Channel       int64 `protobuf:"varint,3,opt,name=channel" json:"channel,omitempty"`
	Frequency     int64 `protobuf:"varint,4,opt,name=frequency" json:"frequency,omitempty"`
}

func (m *GetChannelResponse) Reset()                    { *m = GetChannelResponse{} }
func (m *GetChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*GetChannelResponse) ProtoMessage()               {}
func (*GetChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

type UpdateChannelRequest struct {
	Id            int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ChannelListID int64 `protobuf:"varint,2,opt,name=channelListID" json:"channelListID,omitempty"`
	Channel       int64 `protobuf:"varint,3,opt,name=channel" json:"channel,omitempty"`
	Frequency     int64 `protobuf:"varint,4,opt,name=frequency" json:"frequency,omitempty"`
}

func (m *UpdateChannelRequest) Reset()                    { *m = UpdateChannelRequest{} }
func (m *UpdateChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateChannelRequest) ProtoMessage()               {}
func (*UpdateChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

type UpdateChannelResponse struct {
}

func (m *UpdateChannelResponse) Reset()                    { *m = UpdateChannelResponse{} }
func (m *UpdateChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateChannelResponse) ProtoMessage()               {}
func (*UpdateChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

type DeleteChannelRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteChannelRequest) Reset()                    { *m = DeleteChannelRequest{} }
func (m *DeleteChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteChannelRequest) ProtoMessage()               {}
func (*DeleteChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

type DeleteChannelResponse struct {
}

func (m *DeleteChannelResponse) Reset()                    { *m = DeleteChannelResponse{} }
func (m *DeleteChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteChannelResponse) ProtoMessage()               {}
func (*DeleteChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

type ListChannelsByChannelListRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ListChannelsByChannelListRequest) Reset()         { *m = ListChannelsByChannelListRequest{} }
func (m *ListChannelsByChannelListRequest) String() string { return proto.CompactTextString(m) }
func (*ListChannelsByChannelListRequest) ProtoMessage()    {}
func (*ListChannelsByChannelListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{18}
}

type ListChannelsByChannelListResponse struct {
	Result []*GetChannelResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListChannelsByChannelListResponse) Reset()         { *m = ListChannelsByChannelListResponse{} }
func (m *ListChannelsByChannelListResponse) String() string { return proto.CompactTextString(m) }
func (*ListChannelsByChannelListResponse) ProtoMessage()    {}
func (*ListChannelsByChannelListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{19}
}

func (m *ListChannelsByChannelListResponse) GetResult() []*GetChannelResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateChannelListRequest)(nil), "api.CreateChannelListRequest")
	proto.RegisterType((*CreateChannelListResponse)(nil), "api.CreateChannelListResponse")
	proto.RegisterType((*UpdateChannelListRequest)(nil), "api.UpdateChannelListRequest")
	proto.RegisterType((*UpdateChannelListResponse)(nil), "api.UpdateChannelListResponse")
	proto.RegisterType((*GetChannelListRequest)(nil), "api.GetChannelListRequest")
	proto.RegisterType((*GetChannelListResponse)(nil), "api.GetChannelListResponse")
	proto.RegisterType((*ListChannelListRequest)(nil), "api.ListChannelListRequest")
	proto.RegisterType((*ListChannelListResponse)(nil), "api.ListChannelListResponse")
	proto.RegisterType((*DeleteChannelListRequest)(nil), "api.DeleteChannelListRequest")
	proto.RegisterType((*DeleteChannelListResponse)(nil), "api.DeleteChannelListResponse")
	proto.RegisterType((*CreateChannelRequest)(nil), "api.CreateChannelRequest")
	proto.RegisterType((*CreateChannelResponse)(nil), "api.CreateChannelResponse")
	proto.RegisterType((*GetChannelRequest)(nil), "api.GetChannelRequest")
	proto.RegisterType((*GetChannelResponse)(nil), "api.GetChannelResponse")
	proto.RegisterType((*UpdateChannelRequest)(nil), "api.UpdateChannelRequest")
	proto.RegisterType((*UpdateChannelResponse)(nil), "api.UpdateChannelResponse")
	proto.RegisterType((*DeleteChannelRequest)(nil), "api.DeleteChannelRequest")
	proto.RegisterType((*DeleteChannelResponse)(nil), "api.DeleteChannelResponse")
	proto.RegisterType((*ListChannelsByChannelListRequest)(nil), "api.ListChannelsByChannelListRequest")
	proto.RegisterType((*ListChannelsByChannelListResponse)(nil), "api.ListChannelsByChannelListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ChannelList service

type ChannelListClient interface {
	// Create creates the given channel-list.
	Create(ctx context.Context, in *CreateChannelListRequest, opts ...grpc.CallOption) (*CreateChannelListResponse, error)
	// Update updates the given channel-list.
	Update(ctx context.Context, in *UpdateChannelListRequest, opts ...grpc.CallOption) (*UpdateChannelListResponse, error)
	// Get returns the channel-list matching the given id.
	Get(ctx context.Context, in *GetChannelListRequest, opts ...grpc.CallOption) (*GetChannelListResponse, error)
	// List lists the channel-lists.
	List(ctx context.Context, in *ListChannelListRequest, opts ...grpc.CallOption) (*ListChannelListResponse, error)
	// Delete deletes the channel-list matching the given id.
	Delete(ctx context.Context, in *DeleteChannelListRequest, opts ...grpc.CallOption) (*DeleteChannelListResponse, error)
}

type channelListClient struct {
	cc *grpc.ClientConn
}

func NewChannelListClient(cc *grpc.ClientConn) ChannelListClient {
	return &channelListClient{cc}
}

func (c *channelListClient) Create(ctx context.Context, in *CreateChannelListRequest, opts ...grpc.CallOption) (*CreateChannelListResponse, error) {
	out := new(CreateChannelListResponse)
	err := grpc.Invoke(ctx, "/api.ChannelList/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelListClient) Update(ctx context.Context, in *UpdateChannelListRequest, opts ...grpc.CallOption) (*UpdateChannelListResponse, error) {
	out := new(UpdateChannelListResponse)
	err := grpc.Invoke(ctx, "/api.ChannelList/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelListClient) Get(ctx context.Context, in *GetChannelListRequest, opts ...grpc.CallOption) (*GetChannelListResponse, error) {
	out := new(GetChannelListResponse)
	err := grpc.Invoke(ctx, "/api.ChannelList/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelListClient) List(ctx context.Context, in *ListChannelListRequest, opts ...grpc.CallOption) (*ListChannelListResponse, error) {
	out := new(ListChannelListResponse)
	err := grpc.Invoke(ctx, "/api.ChannelList/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelListClient) Delete(ctx context.Context, in *DeleteChannelListRequest, opts ...grpc.CallOption) (*DeleteChannelListResponse, error) {
	out := new(DeleteChannelListResponse)
	err := grpc.Invoke(ctx, "/api.ChannelList/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelList service

type ChannelListServer interface {
	// Create creates the given channel-list.
	Create(context.Context, *CreateChannelListRequest) (*CreateChannelListResponse, error)
	// Update updates the given channel-list.
	Update(context.Context, *UpdateChannelListRequest) (*UpdateChannelListResponse, error)
	// Get returns the channel-list matching the given id.
	Get(context.Context, *GetChannelListRequest) (*GetChannelListResponse, error)
	// List lists the channel-lists.
	List(context.Context, *ListChannelListRequest) (*ListChannelListResponse, error)
	// Delete deletes the channel-list matching the given id.
	Delete(context.Context, *DeleteChannelListRequest) (*DeleteChannelListResponse, error)
}

func RegisterChannelListServer(s *grpc.Server, srv ChannelListServer) {
	s.RegisterService(&_ChannelList_serviceDesc, srv)
}

func _ChannelList_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelListServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChannelList/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelListServer).Create(ctx, req.(*CreateChannelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelList_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelListServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChannelList/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelListServer).Update(ctx, req.(*UpdateChannelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelList_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelListServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChannelList/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelListServer).Get(ctx, req.(*GetChannelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelList_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelListServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChannelList/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelListServer).List(ctx, req.(*ListChannelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelList_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelListServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChannelList/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelListServer).Delete(ctx, req.(*DeleteChannelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ChannelList",
	HandlerType: (*ChannelListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ChannelList_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ChannelList_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ChannelList_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ChannelList_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChannelList_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

// Client API for Channel service

type ChannelClient interface {
	// Create creates the given channel.
	Create(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	// Get returns the channel matching the given id.
	Get(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error)
	// Update updates the given channel.
	Update(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error)
	// Delete deletes the channel matching the given id.
	Delete(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error)
	// ListByChannelList lists the channels matching the given channel-list id.
	ListByChannelList(ctx context.Context, in *ListChannelsByChannelListRequest, opts ...grpc.CallOption) (*ListChannelsByChannelListResponse, error)
}

type channelClient struct {
	cc *grpc.ClientConn
}

func NewChannelClient(cc *grpc.ClientConn) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) Create(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	out := new(CreateChannelResponse)
	err := grpc.Invoke(ctx, "/api.Channel/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Get(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	out := new(GetChannelResponse)
	err := grpc.Invoke(ctx, "/api.Channel/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Update(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error) {
	out := new(UpdateChannelResponse)
	err := grpc.Invoke(ctx, "/api.Channel/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Delete(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error) {
	out := new(DeleteChannelResponse)
	err := grpc.Invoke(ctx, "/api.Channel/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) ListByChannelList(ctx context.Context, in *ListChannelsByChannelListRequest, opts ...grpc.CallOption) (*ListChannelsByChannelListResponse, error) {
	out := new(ListChannelsByChannelListResponse)
	err := grpc.Invoke(ctx, "/api.Channel/ListByChannelList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Channel service

type ChannelServer interface {
	// Create creates the given channel.
	Create(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	// Get returns the channel matching the given id.
	Get(context.Context, *GetChannelRequest) (*GetChannelResponse, error)
	// Update updates the given channel.
	Update(context.Context, *UpdateChannelRequest) (*UpdateChannelResponse, error)
	// Delete deletes the channel matching the given id.
	Delete(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error)
	// ListByChannelList lists the channels matching the given channel-list id.
	ListByChannelList(context.Context, *ListChannelsByChannelListRequest) (*ListChannelsByChannelListResponse, error)
}

func RegisterChannelServer(s *grpc.Server, srv ChannelServer) {
	s.RegisterService(&_Channel_serviceDesc, srv)
}

func _Channel_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Channel/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Create(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Channel/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Get(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Channel/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Update(ctx, req.(*UpdateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Channel/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Delete(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_ListByChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelsByChannelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).ListByChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Channel/ListByChannelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).ListByChannelList(ctx, req.(*ListChannelsByChannelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Channel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Channel",
	HandlerType: (*ChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Channel_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Channel_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Channel_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Channel_Delete_Handler,
		},
		{
			MethodName: "ListByChannelList",
			Handler:    _Channel_ListByChannelList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() { proto.RegisterFile("channels.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xe3, 0x90, 0xaa, 0x53, 0x51, 0xa9, 0x4b, 0x9a, 0x38, 0x6e, 0x5a, 0x9a, 0x2d, 0x0d,
	0x55, 0x41, 0x89, 0x48, 0x6f, 0x08, 0x71, 0x20, 0x15, 0x08, 0x89, 0x53, 0x04, 0xdc, 0xf3, 0xb3,
	0x09, 0x96, 0x5c, 0x3b, 0xc4, 0x1b, 0xa4, 0x5e, 0x2b, 0x1e, 0x00, 0x89, 0x17, 0xe0, 0xca, 0xf3,
	0xf0, 0x0a, 0x3c, 0x08, 0xeb, 0xf5, 0x38, 0xb1, 0xd7, 0xbb, 0x49, 0x2f, 0x5c, 0x22, 0xdb, 0x3b,
	0xf3, 0x7d, 0x33, 0xdf, 0x7c, 0x3b, 0x0a, 0xec, 0x8f, 0xbf, 0x0c, 0x83, 0x80, 0xf9, 0x51, 0x67,
	0xbe, 0x08, 0x79, 0x48, 0xec, 0xe1, 0xdc, 0x73, 0x9b, 0xb3, 0x30, 0x9c, 0xf9, 0xac, 0x2b, 0x9e,
	0xbb, 0xe2, 0x34, 0xe4, 0x43, 0xee, 0x85, 0x01, 0x86, 0xd0, 0x0e, 0x38, 0xfd, 0x05, 0x1b, 0x72,
	0xd6, 0x4f, 0x52, 0x3f, 0x78, 0x11, 0x1f, 0xb0, 0xaf, 0x4b, 0x16, 0x71, 0x42, 0xa0, 0x1c, 0x0c,
	0x6f, 0x98, 0x63, 0x9d, 0x5a, 0x17, 0xbb, 0x03, 0xf9, 0x4c, 0x9f, 0x41, 0x43, 0x13, 0x1f, 0xcd,
	0x05, 0x22, 0x23, 0xfb, 0x50, 0xf2, 0x26, 0x32, 0xdc, 0x1e, 0x88, 0x27, 0xfa, 0x1a, 0x9c, 0x4f,
	0xf3, 0x89, 0x1e, 0x5c, 0x89, 0x5d, 0x91, 0x95, 0x32, 0x64, 0x47, 0xd0, 0xd0, 0xe4, 0x27, 0x64,
	0xf4, 0x29, 0x1c, 0xbe, 0x63, 0x7c, 0x3b, 0x32, 0x7d, 0x05, 0x35, 0x35, 0x50, 0x5f, 0xaf, 0xb6,
	0x86, 0xb7, 0x50, 0x8b, 0x73, 0x34, 0x3c, 0x55, 0x78, 0xe0, 0x7b, 0x37, 0x1e, 0x47, 0x80, 0xe4,
	0x85, 0xd4, 0xa0, 0x12, 0x4e, 0xa7, 0x11, 0xe3, 0x12, 0xc5, 0x1e, 0xe0, 0x1b, 0x0d, 0xa0, 0x5e,
	0xc0, 0xc1, 0x32, 0x4e, 0x00, 0xb8, 0x18, 0x8b, 0xdf, 0x0f, 0x97, 0x41, 0x8a, 0x96, 0xf9, 0x42,
	0xae, 0xa0, 0xb2, 0x60, 0xd1, 0xd2, 0x8f, 0x21, 0xed, 0x8b, 0xbd, 0xde, 0x51, 0x47, 0xcc, 0xb2,
	0xa3, 0xef, 0x69, 0x80, 0xa1, 0xf4, 0x12, 0x9c, 0x6b, 0xe6, 0xb3, 0xfb, 0x68, 0x1f, 0xeb, 0xac,
	0x89, 0x45, 0x9d, 0x39, 0x54, 0x73, 0x13, 0x4f, 0x41, 0x9e, 0xc0, 0xc3, 0xf1, 0x3a, 0xfc, 0xfd,
	0x35, 0xe2, 0xe5, 0x3f, 0x12, 0x07, 0x76, 0xf0, 0x03, 0xea, 0x91, 0xbe, 0x92, 0x26, 0xec, 0x4e,
	0x17, 0x31, 0x56, 0x30, 0xbe, 0x75, 0x6c, 0x79, 0xb6, 0xfe, 0x10, 0x4f, 0x57, 0x61, 0x35, 0x78,
	0xec, 0x0c, 0x0e, 0xd6, 0x4a, 0x98, 0x1a, 0xbc, 0xb3, 0x80, 0x64, 0xa3, 0x0c, 0xf3, 0x2f, 0xb4,
	0x54, 0xda, 0xd2, 0x92, 0xbd, 0xa1, 0xa5, 0xb2, 0xda, 0xd2, 0x77, 0x0b, 0xaa, 0x39, 0x3b, 0x9b,
	0xae, 0xc2, 0xff, 0x2d, 0xa3, 0x0e, 0x87, 0x4a, 0x15, 0x38, 0xe8, 0x36, 0x54, 0x73, 0x2e, 0x30,
	0x89, 0x29, 0x00, 0x94, 0x38, 0x04, 0xe8, 0xc1, 0x69, 0xc6, 0xe2, 0xd1, 0x9b, 0xdb, 0x7b, 0x58,
	0xef, 0x23, 0xb4, 0x36, 0xe4, 0xe0, 0x9c, 0xba, 0xca, 0x05, 0xa8, 0x2b, 0x17, 0x40, 0x35, 0x7f,
	0xef, 0x77, 0x19, 0xf6, 0x32, 0x40, 0x24, 0x80, 0x4a, 0xe2, 0x26, 0x72, 0x2c, 0x53, 0x4d, 0x2b,
	0xcf, 0x3d, 0x31, 0x1d, 0x63, 0x8b, 0xe7, 0x77, 0x7f, 0xfe, 0xfe, 0x2c, 0x3d, 0xa6, 0xae, 0x5c,
	0xa7, 0xdf, 0x5e, 0x74, 0x51, 0x73, 0x5f, 0x04, 0x75, 0xc7, 0x32, 0xed, 0xa5, 0x75, 0x19, 0xf3,
	0x25, 0x1a, 0x23, 0x9f, 0x69, 0x0b, 0x22, 0x9f, 0x79, 0xc9, 0x6d, 0xe4, 0x5b, 0xca, 0xb4, 0x98,
	0x6f, 0x04, 0xb6, 0x50, 0x83, 0xb8, 0xda, 0xc5, 0x90, 0x30, 0x6d, 0x5a, 0x1a, 0x94, 0x4a, 0x9a,
	0x26, 0xad, 0xeb, 0x68, 0x66, 0x8c, 0xc7, 0x1c, 0x53, 0x28, 0x4b, 0x2d, 0x13, 0x20, 0xfd, 0x4e,
	0x74, 0x9b, 0xfa, 0x43, 0xa4, 0x39, 0x93, 0x34, 0xc7, 0xd4, 0xd1, 0xd1, 0xc4, 0x3f, 0xa8, 0x5d,
	0x62, 0x2f, 0xd4, 0xce, 0xb4, 0xc5, 0x50, 0x3b, 0xf3, 0xe2, 0xda, 0xa8, 0xdd, 0x44, 0xa6, 0x09,
	0xbe, 0xde, 0xaf, 0x32, 0xec, 0x60, 0xba, 0xd0, 0x31, 0xf5, 0x49, 0xa3, 0x68, 0x84, 0x94, 0xd7,
	0xd5, 0x1d, 0x21, 0x67, 0x4b, 0x72, 0x1e, 0xd1, 0x9a, 0xc2, 0x99, 0xf1, 0xc6, 0xe7, 0x64, 0x56,
	0xb5, 0x82, 0x87, 0x13, 0x74, 0x93, 0xb7, 0xe9, 0x89, 0x84, 0x76, 0xe8, 0x23, 0x15, 0x1a, 0xe7,
	0x33, 0x5a, 0x79, 0xae, 0x51, 0x34, 0x55, 0xbe, 0x76, 0xfd, 0xfd, 0x37, 0xd6, 0x9e, 0xf5, 0x59,
	0x3a, 0x9b, 0x46, 0x51, 0xfc, 0x3c, 0x87, 0x7e, 0x45, 0x18, 0x39, 0x56, 0xf3, 0x20, 0x3f, 0x2c,
	0x38, 0x88, 0xe7, 0x98, 0x5b, 0x05, 0xe4, 0x5c, 0x35, 0x96, 0x76, 0xbd, 0xb8, 0xed, 0x6d, 0x61,
	0x58, 0xc7, 0x73, 0x59, 0x47, 0x9b, 0xb6, 0xd4, 0x3a, 0x7c, 0x95, 0x59, 0x94, 0x34, 0xaa, 0xc8,
	0xff, 0x4a, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x3a, 0x0f, 0x71, 0x60, 0x09, 0x00,
	0x00,
}
